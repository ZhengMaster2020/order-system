//时间函数
def createVersion() {
    // 定义一个版本号作为当次构建的版本，输出结果
    return new Date().format('yyyyMMddHHmmss')
}

pipeline {
    agent any
    //环境变量
    environment {
        //时间变量
        date_time = createVersion()

        //目标主机目录变量
        sitename = "${JOB_NAME}"  //项目名称（需修改）
        sitebasedir = "/home/wwwroot/${sitename}"  //项目基础目录
        releasesdir = "${sitebasedir}/releases"  //版本库一般是固定的

	    //获取发布版本的时间戳
        uptime = "${sitename}_${date_time}_$BRANCH_TAG"

        //项目变量
        leave_test = "www@120.26.240.150"   //测试机IP地址()
        //leave_product = "www@192.168.1.18"  //生产IP地址()

        //命令变量
        git = "/usr/bin/git"
        sed = "/usr/bin/sed"
        pm2 = "/usr/bin/pm2"
        yarn = "/usr/bin/yarn"
        rsync = "/usr/bin/rsync"


        //钉钉token
        //DingTalk_robot = "a32c081e-a529-4938-97bf-3d1ba9dc7eb6"
        
	    //脚本路径
        srcipts_dir = "${WORKSPACE}/mkp_node_jenkinsfile"

        //git_url
        git_url = "git@gitlab.fandow.com:fandow/security-code.fandow.com.git"
    }
        //参数化构建
    parameters {
        choice(
           choices: 'test\nproduct\nrollback_test\nrollback_product',
           description: 'choose deploy environment or rollback',
           name: 'status'
       )
        gitParameter name: 'BRANCH_TAG', 
                     type: 'PT_BRANCH_TAG',
                     branchFilter: 'origin/(.*)',  //origin是一个远程服务器名称
                     defaultValue: 'master',  //默认值
                     selectedValue: 'DEFAULT',  //选择值
                     sortMode: 'ASCENDING_SMART',  //排序方式
                                         description: 'Select your branch or tag.'
    }

    stages{
        stage('开始部署流程') {
            when { anyOf { environment name: 'status', value: 'test'; environment name: 'status', value: 'product' } }
            stages {
                stage('部署确认'){
                    steps{
                    timeout(1) { //一分钟没有输入密码则中断构建
                         script {
//                            when { environment name: 'status', value: 'product' }
                             //对部署环境判断，匹配相应的验证才能继续往下执行
                             if ( env.status == "product"){
                                 userMap = input message: 'please input password', ok: 'ok', submitter: 'admin', parameters: [password(name:'password', defaultValue: '123456', description: '发布代码口令' )], submitterParameter: 'admin'
                                 if (userMap['password'].toString() == "123456"){
                                     echo "密码正确"
                                 }else{
                                     echo "密码错误，请确认您是否有权限操作"
                                 }
                             }
                         }
//                            tag_version = """${ssh $ip "/bin/find $release_dir -type d -name "$deploy_name-*-$BRANCH_TAG" 2>/dev/null | /bin/wc -l"}"""
//                            echo "${tag_version}"
//                            if ( env.tag_version == '1' ) {
//                                input message:'请勿重复构建，继续执行构建选择ok',ok:'ok'
                       }
                    }
                }


           stage('pull code') {
               //when { anyOf { environment name: 'status', value: 'test'; environment name: 'status', value: 'product' } }
               steps {
                   checkout([$class: 'GitSCM', 
                             branches: [[name: "${params.BRANCH_TAG}"]], 
                             doGenerateSubmoduleConfigurations: false, 
                             extensions: [], 
                             gitTool: 'Default', 
                             submoduleCfg: [], 
                             userRemoteConfigs: [[url: "${git_url}",credentialsId: 'for_gitlab',]]
                           ])
                   }
                }
                
//			    stage('代码质量检查') {
//			        //when { environment name: 'status', value: 'update_test' }
//			        //when { anyOf { environment 'status.update_test'; environment 'status.update_product' } }
//			        steps {
//			            withSonarQubeEnv('sonarqube') {
//			            sh label: '', script: '/usr/local/sonar-scanner/bin/sonar-scanner -Dsonar.projectKey=php -Dsonar.projectName=${JOB_NAME} -Dsonar.sources=. '
//			            }
//			        }
//			    }
                
        				stage('部署') {
        					steps {
        						sh 'sh -x ${srcipts_dir}/deploy_mkp_node.sh $status'
        					} 
        				}
                   }
                }
    		    stage('回退') {
                when { anyOf { environment name: 'status', value: 'rollback_test'; environment name: 'status', value: 'rollback_product' } }
    			steps {
    						sh 'sh -x ${srcipts_dir}/deploy_mkp_node.sh $status'
    			} 
    		}
    	}
//    post('代码发布结果通知') {
//        success {
//            dingtalk (
//                robot: "$DingTalk_robot",
//                type: 'LINK',
//                title:'请查收${BUILD_URL}项目的代码部署结果',
//                text: [
//                    '代码部署成功'
//                ],
//                messageUrl: '${BUILD_URL}',
//            )
//        }
//        failure {
//            dingtalk (
//                robot: "$DingTalk_robot",
//                type: 'LINK',
//                title:'请查收${BUILD_URL}项目的代码部署结果',
//                text: [
//                    '代码部署失败'
//                ],
//                messageUrl: '${BUILD_URL}',
//            )
//        }
//    }
}
